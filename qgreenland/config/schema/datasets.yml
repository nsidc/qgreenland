list(include('dataset'))
---

dataset:
  id: str()
  # TODO: Enum access_method?
  assets: list(include('assets'))
  metadata: include('metadata')


---
assets:
  # Unique ID used for generating paths and uniquely identifiying an asset
  # within a dataset.
  id: str()
  type: enum('http', 'cmr', 'manual', 'online', 'repo')

  # online
  provider: str(required=False)

  # TODO: Allow arbitrary "extra" fields instead of typing out all the possible
  # kinds of assets? Let Pydantic do this validation?

  # http
  urls: list(str(), required=False)

  # cmr
  granule_ur: str(required=False)
  collection_concept_id: str(required=False)

  # online
  # TODO: Consider breaking up in to "featureserver_url", "feature_id", "query"?
  url: str(required=False)

  # manual:
  access_instructions: str(required=False)

  # repo:
  filename: str(required=False)

---
metadata:
  title: str()
  abstract: str()
  citation:
    text: str()
    url: str()
