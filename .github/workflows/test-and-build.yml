name: "Test, release, and build"

on:
  # TODO: We currently get double workflows when pushing to pull request
  # branches. Set this to only run on pushes to `main` and pull requests
  # instead?
  push:
      branches:
        - "main"
      tags:
        - "v[0-9]+.[0-9]+.[0-9]+*"
  pull_request:


# Default to bash in login mode; key to activating conda environment
# https://github.com/mamba-org/provision-with-micromamba#IMPORTANT
defaults:
  run:
    shell: "bash -l {0}"


jobs:
  test:
    name: "Run tests"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v3"

      - name: "Apt install libgl1-mesa-glx"
        run: |
          # Install libgl1-mesa-glx. Import errors occur otherwise.
          # See: https://app.circleci.com/jobs/github/nsidc/qgreenland/72/parallel-runs/0/steps/0-102
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx

      - name: "Install Conda environment"
        uses: "mamba-org/setup-micromamba@v1"
        with:
          environment-file: "conda-lock.yml"
          # When using a lock-file, we have to set an environment name.
          environment-name: "qgreenland-ci"
          cache-environment: true
          # Increase this key to trigger cache invalidation
          cache-environment-key: 1

      - name: "Run tests"
        run: "inv test.ci"
        env:
          # QGIS complains when setting up an QgsApplicatoin if `QT_QPA_PLATFORM` is not
          # set to `offscreen`:
          #     qt.qpa.xcb: could not connect to display
          #     qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "" even
          #     though it was found.
          #     This application failed to start because no Qt
          #     platform plugin could be initialized. Reinstalling the application
          #     may fix this problem.
          #
          #     Available platform plugins are: eglfs, minimal, minimalegl,
          #     offscreen, vnc, webgl, xcb.
          #
          #     Fatal Python error: Aborted
          QT_QPA_PLATFORM: offscreen


  # TODO: Consider extracting everything below this line to a separate workflow
  # which is triggered by pushes to the default branch and GitHub releases.
  build-and-release-image:
    name: "Build and (if `main` or tag) release container image"
    runs-on: "ubuntu-latest"
    needs: ["test"]
    env:
      IMAGE_NAME: "nsidc/qgreenland"
      # GitHub Actions expressions don't have great conditional support, so
      # writing a ternary expression looks a lot like bash. In Python, this
      # would read as:
      #     'latest' if github.ref_type == 'branch' else github.ref_name
      #     https://docs.github.com/en/actions/learn-github-actions/expressions
      IMAGE_TAG: "${{ github.ref_type == 'branch' && 'latest' || github.ref_name }}"
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v3"

      - name: "Build Docker image"
        run: |
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" .

      - name: "DockerHub login (if `main` or tag)"
        if: "github.event_name == 'tag' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)"
        uses: "docker/login-action@v2"
        with:
          username: "${{secrets.DOCKER_USER}}"
          password: "${{secrets.DOCKER_PASS}}"

      - name: "GHCR login (if `main` or tag)"
        if: "github.event_name == 'tag' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)"
        uses: "docker/login-action@v2"
        with:
          registry: "ghcr.io"
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Release to DockerHub and GHCR (if `main` or tag)"
        if: "github.event_name == 'tag' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)"
        run: |
          docker push "${IMAGE_NAME}:${IMAGE_TAG}"

          docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "ghcr.io/${IMAGE_NAME}:${IMAGE_TAG}"
          docker push "ghcr.io/${IMAGE_NAME}:${IMAGE_TAG}"


  build-package:
    name: "Build QGreenland project (if tag)"
    runs-on: "ubuntu-latest"
    needs: ["build-and-release-image"]
    if: "github.ref_type == 'tag'"
    steps:
      - name: "Trigger Jenkins to build QGreenland Core"
        run: |
          JOB_NAME="qgreenland_C3_Production_Build_QGreenland_Package"
          JOB_URL="${{ secrets.JENKINS_URL }}/job/${JOB_NAME}"
          JOB_BUILD_URL="${JOB_URL}/buildWithParameters?ref=${{ github.ref_name }}&delay=5sec"

          wget "$JOB_BUILD_URL"
